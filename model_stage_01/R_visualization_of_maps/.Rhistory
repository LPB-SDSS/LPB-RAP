line_col = user_defined_baseline_color,
text_family = user_defined_font))
pl <- pl + theme_LPB_RAP
pl <- pl + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
pl <- pl + theme(panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
pl <- pl + labs(title = plot_title,
subtitle = paste(subtitle_prefix),
caption = paste(caption_landscape, climate_period, sep = ' | '),
fill = LUT_title)
ggsave(file.path(output_folder, paste(publication_indicator, ' ', plot_title, ' ', subtitle_prefix, output_format, sep = '')),
height = output_height, width = output_width, dpi = output_dpi, units = output_unit)
}
scenarios <- tibble(
scenario_name = c('weak_conservation', 'enforced_conservation', 'no_conservation'),
start_year = c(initial_simulation_year_BAUs , initial_simulation_year_BAUs, initial_simulation_year_worst_case)
)
for (i in seq_along(scenarios$scenario_name)) {
scenario_i <- scenarios[i,] %>%
pull(scenario_name)
start_year_i <- scenarios[i,] %>%
pull(start_year)
raster_type_input_folder <- file.path(input_folder, scenario_i, 'Landscape_configuration_mplc')
tibble(
file_name = list.files(raster_type_input_folder, full.names = TRUE),
) %>%
mutate(time_step = as.numeric(str_sub(file_name, -7, -5)),
year = time_step + start_year_i - 1,
plot_title = paste(plot_title, scenario_i, year)) %>%
left_join(climate_periods_complete) %>%
rowwise() %>%
do({
print(paste('plotting', .$plot_title))
create_plot_for_raster_file(raster_file_location = .$file_name,
plot_title = .$plot_title,
climate_period = .$description)
tibble()
}
)
}
### UNFINSIHED LULCC mplc gridded ##############################################
### disregarded - too small
# plot_title <- "Simulated land use mplc (probable) - gridded"
# LUT_title <- "Land Use Types"
#
# LULCC_mplc_BAU_df <- map2_dfr(LULCC_mplc_BAU_locations, LULCC_mplc_BAU_ids, import_one_raster) %>%
#   mutate(scenario = 'BAU',
#          start_year = initial_simulation_year_BAUs )
#
# LULCC_mplc_BAUplus_df <- map2_dfr(LULCC_mplc_BAUplus_locations, LULCC_mplc_BAUplus_ids, import_one_raster)%>%
#   mutate(scenario = 'BAU(+)',
#          start_year = initial_simulation_year_BAUs)
#
# LULCC_mplc_worst_case_df <- map2_dfr(LULCC_mplc_worst_case_locations, LULCC_mplc_worst_case_ids, import_one_raster)%>%
#   mutate(scenario = 'worst-case',
#          start_year = initial_simulation_year_worst_case)
#
# LULCC_mplc_dfs <- bind_rows(LULCC_mplc_BAU_df, LULCC_mplc_BAUplus_df, LULCC_mplc_worst_case_df) %>%
#   mutate(LUT_code = paste('LUT', str_pad(value, 2, 'left', '0'), sep = ''),
#          time_step = as.numeric(raster_id),
#          year = time_step + start_year - 1) %>%
#   left_join(RAP_LUTs_lookup_table)
#
# raster_dataframe <- LULCC_mplc_dfs
#
# pl <- ggplot()
# pl <- pl + dem_hillshade_layer
# pl <- pl + new_scale_fill()
# pl <- pl + facet_grid(~year ~scenario)
# pl <- pl + geom_raster(data = raster_dataframe,
#                        aes(x = x, y = y, fill = LUT_name),
#                        alpha = 0.75,
#                        show.legend = TRUE)
# pl <- pl + scale_fill_manual(values = LUT_colors_lookup,
#                              limits = force)
# pl <- pl + coord_sf(crs = user_defined_EPSG)
# pl <- pl + theme_LPB_RAP
# pl <- pl + theme(axis.title.x = element_blank(),
#                  axis.title.y = element_blank())
# pl <- pl + theme(panel.grid.minor.x = element_blank(),
#                  panel.grid.minor.y = element_blank())
# pl <- pl + labs(title = plot_title,
#                 subtitle = paste(subtitle_prefix),
#                 fill = LUT_title)
# ggsave(file.path(output_folder, paste(publication_indicator, ' ', plot_title, ' ', subtitle_prefix, output_format, sep = '')),
#        height = 29.7, width = 21, dpi = output_dpi, units = "cm")
# LULCC RAP - Complete Landscape ###############################################
plot_title <- "Simulated land use RAP (possible)"
create_plot_for_raster_file <- function(raster_file_location,
plot_title, climate_period) {
LUT_title <- "Land Use Types"
raster_to_process <- raster(raster_file_location)
raster_dataframe <- as.data.frame(raster_to_process, xy = TRUE) %>%
drop_na %>%
rename(value = 3) %>%
mutate(LUT_code = paste('LUT', str_pad(value, 2, 'left', '0'), sep = '')) %>%
left_join(RAP_LUTs_lookup_table)
pl <- ggplot()
pl <- pl + dem_hillshade_layer
pl <- pl + new_scale_fill()
pl <- pl + geom_raster(data = raster_dataframe,
aes(x = x, y = y, fill = LUT_name),
alpha = 0.75,
show.legend = TRUE)
pl <- pl + scale_fill_manual(
values = LUT_colors_lookup,
limits = force)
pl <- pl + coord_sf(crs = user_defined_EPSG)
# # add attributes, themes and labs
pl <- pl + ggspatial::annotation_scale(location = user_defined_map_scale_location,
bar_cols = c(user_defined_baseline_color, "white"),
text_family = user_defined_font)
pl <- pl + ggspatial::annotation_north_arrow(location = user_defined_north_arrow_location,
which_north = "true",
pad_x = unit(user_defined_north_arrow_pad_x, user_defined_north_arrow_unit),
pad_y = unit(user_defined_north_arrow_pad_y, user_defined_north_arrow_unit),
style = ggspatial::north_arrow_fancy_orienteering(fill = c(user_defined_baseline_color, "white"),
line_col = user_defined_baseline_color,
text_family = user_defined_font))
pl <- pl + theme_LPB_RAP
pl <- pl + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
pl <- pl + theme(panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
pl <- pl + labs(title = plot_title,
subtitle = paste(subtitle_prefix),
caption = paste(caption_landscape, climate_period, sep = ' | '),
fill = LUT_title)
ggsave(file.path(output_folder, paste(publication_indicator, ' ', plot_title, ' ', subtitle_prefix, output_format, sep = '')),
height = output_height, width = output_width, dpi = output_dpi, units = output_unit)
}
scenarios <- tibble(
scenario_name = c('weak_conservation', 'enforced_conservation', 'no_conservation'),
start_year = c(initial_simulation_year_BAUs , initial_simulation_year_BAUs, initial_simulation_year_worst_case)
)
for (i in seq_along(scenarios$scenario_name)) {
scenario_i <- scenarios[i,] %>%
pull(scenario_name)
start_year_i <- scenarios[i,] %>%
pull(start_year)
raster_type_input_folder <- file.path(input_folder, scenario_i, 'Landscape_configuration_RAP')
tibble(
file_name = list.files(raster_type_input_folder, full.names = TRUE),
) %>%
mutate(time_step = as.numeric(str_sub(file_name, -7, -5)),
year = time_step + start_year_i - 1,
plot_title = paste(plot_title, scenario_i, year)) %>%
left_join(climate_periods_complete) %>%
rowwise() %>%
do({
print(paste('plotting', .$plot_title))
create_plot_for_raster_file(raster_file_location = .$file_name,
plot_title = .$plot_title,
climate_period = .$description)
tibble()
}
)
}
# LULCC RAP - RAP LUTS only ###############################################
plot_title <- "Simulated RAP-LUTs distribution"
create_plot_for_raster_file <- function(raster_file_location,
plot_title, climate_period) {
LUT_title <- "RAP Land Use Types"
RAP_LUTs <- c(21, 22, 23, 24, 25)
RAP_LUT_colors <- tibble(
RAP_LUT_value = c(21, 22, 23, 24, 25),
colors = c("#440154", "#3b528b", "#21918c", "#5ec962", "#fde725" )
) %>%
mutate(LUT_code = paste('LUT', str_pad(RAP_LUT_value, 2, 'left', '0'), sep = ''))
RAP_LUT_colors_lookup <- RAP_LUT_colors %>%
left_join(RAP_LUTs_lookup_table) %>%
pull(colors, LUT_name)
raster_to_process <- raster(raster_file_location)
RAP_raster_dataframe <- as.data.frame(raster_to_process, xy = TRUE) %>%
drop_na %>%
rename(value = 3) %>%
mutate(LUT_code = paste('LUT', str_pad(value, 2, 'left', '0'), sep = '')) %>%
filter(., value %in% RAP_LUTs) %>% # extract the RAP LUTs to be displayed
left_join(RAP_LUTs_lookup_table)
pl <- ggplot()
pl <- pl + dem_hillshade_layer
pl <- pl + scale_fill_gradient(low = "darkgrey", high = "white", guide = 'none')
pl <- pl + new_scale_fill()
pl <- pl + geom_raster(data = RAP_raster_dataframe,
aes(x = x, y = y, fill = LUT_name),
alpha = 0.75,
show.legend = TRUE)
pl <- pl + scale_fill_manual(values = RAP_LUT_colors_lookup,
limits = force)
pl <- pl + coord_sf(crs = user_defined_EPSG)
# # add attributes, themes and labs
pl <- pl + ggspatial::annotation_scale(location = user_defined_map_scale_location,
bar_cols = c(user_defined_baseline_color, "white"),
text_family = user_defined_font)
pl <- pl + ggspatial::annotation_north_arrow(location = user_defined_north_arrow_location,
which_north = "true",
pad_x = unit(user_defined_north_arrow_pad_x, user_defined_north_arrow_unit),
pad_y = unit(user_defined_north_arrow_pad_y, user_defined_north_arrow_unit),
style = ggspatial::north_arrow_fancy_orienteering(fill = c(user_defined_baseline_color, "white"),
line_col = user_defined_baseline_color,
text_family = user_defined_font))
pl <- pl + theme_LPB_RAP
pl <- pl + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
pl <- pl + theme(panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
pl <- pl + labs(title = plot_title,
subtitle = paste(subtitle_prefix),
caption = paste(caption_landscape, climate_period, sep = ' | '),
fill = LUT_title)
ggsave(file.path(output_folder, paste(publication_indicator, ' ', plot_title, ' ', subtitle_prefix, output_format, sep = '')),
height = output_height, width = output_width, dpi = output_dpi, units = output_unit)
}
scenarios <- tibble(
scenario_name = c('weak_conservation', 'enforced_conservation', 'no_conservation'),
start_year = c(initial_simulation_year_BAUs , initial_simulation_year_BAUs, initial_simulation_year_worst_case)
)
for (i in seq_along(scenarios$scenario_name)) {
scenario_i <- scenarios[i,] %>%
pull(scenario_name)
start_year_i <- scenarios[i,] %>%
pull(start_year)
raster_type_input_folder <- file.path(input_folder, scenario_i, 'Landscape_configuration_RAP')
tibble(
file_name = list.files(raster_type_input_folder, full.names = TRUE),
) %>%
mutate(time_step = as.numeric(str_sub(file_name, -7, -5)),
year = time_step + start_year_i - 1,
plot_title = paste(plot_title, scenario_i, year)) %>%
left_join(climate_periods_complete) %>%
rowwise() %>%
do({
print(paste('plotting', .$plot_title))
create_plot_for_raster_file(raster_file_location = .$file_name,
plot_title = .$plot_title,
climate_period = .$description)
tibble()
}
)
}
### > LPB urbanization patterns (LUT01) - extract this from mplc ###############
plot_title <- "LPB urbanization patterns"
create_plot_for_raster_file <- function(raster_file_location,
plot_title, climate_period) {
legend_title <- "Aspects"
raster_dataframe <- raster(raster_file_location) %>%
as.data.frame(xy = TRUE) %>%
drop_na %>%
rename(value = 3) %>%
mutate(urbanization = if_else(value == 1, 'built-up', 'region'),
LUT_code = paste('LUT', str_pad(value, 2, 'left', '0'), sep = '')) %>%
left_join(RAP_LUTs_lookup_table)
pl <- ggplot()
pl <- pl + dem_hillshade_layer
pl <- pl + new_scale_fill()
pl <- pl + geom_raster(data = raster_dataframe,
aes(x = x, y = y, fill = urbanization),
alpha = 0.75,
show.legend = TRUE)
pl <- pl + scale_fill_viridis_d(option = user_defined_color_spectrum)
pl <- pl + coord_sf(crs = user_defined_EPSG)
# # add attributes, themes and labs
pl <- pl + ggspatial::annotation_scale(location = user_defined_map_scale_location,
bar_cols = c(user_defined_baseline_color, "white"),
text_family = user_defined_font)
pl <- pl + ggspatial::annotation_north_arrow(location = user_defined_north_arrow_location,
which_north = "true",
pad_x = unit(user_defined_north_arrow_pad_x, user_defined_north_arrow_unit),
pad_y = unit(user_defined_north_arrow_pad_y, user_defined_north_arrow_unit),
style = ggspatial::north_arrow_fancy_orienteering(fill = c(user_defined_baseline_color, "white"),
line_col = user_defined_baseline_color,
text_family = user_defined_font))
pl <- pl + theme_LPB_RAP
pl <- pl + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
pl <- pl + theme(panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
pl <- pl + labs(title = plot_title,
subtitle = paste(subtitle_prefix),
caption = paste(caption_landscape, climate_period, sep = ' | '),
fill = legend_title)
ggsave(file.path(output_folder, paste(publication_indicator, ' ', plot_title, ' ', subtitle_prefix, output_format, sep = '')),
height = output_height, width = output_width, dpi = output_dpi, units = output_unit)
}
scenarios <- tibble(
scenario_name = c('weak_conservation', 'enforced_conservation', 'no_conservation'),
start_year = c(initial_simulation_year_BAUs , initial_simulation_year_BAUs, initial_simulation_year_worst_case)
)
for (i in seq_along(scenarios$scenario_name)) {
scenario_i <- scenarios[i,] %>%
pull(scenario_name)
start_year_i <- scenarios[i,] %>%
pull(start_year)
raster_type_input_folder <- file.path(input_folder, scenario_i, 'Landscape_configuration_mplc')
tibble(
file_name = list.files(raster_type_input_folder, full.names = TRUE),
) %>%
mutate(time_step = as.numeric(str_sub(file_name, -7, -5)),
year = time_step + start_year_i - 1,
plot_title = paste(plot_title, scenario_i, year)) %>%
left_join(climate_periods_complete) %>%
rowwise() %>%
do({
print(paste('plotting', .$plot_title))
create_plot_for_raster_file(raster_file_location = .$file_name,
plot_title = .$plot_title,
climate_period = .$description)
tibble()
}
)
}
### >>> Overview plot: ##########################################################
# Combines:
# A Region
# B initial LULC
# C anthropogenic features
# D surface freshwater
# E restricted areas
# F slope in percent
# PLOT Joined
# labels <- ggplot() + labs (title = super_plot_title,
#                            subtitle = subtitle_prefix) +
#   theme_LPB_RAP
# pl_joined <- plot_grid(labels, pl1, pl2, pl3, pl4, nrow = 3, ncol = 3, align = 'hv', axis = 'l', rel_heights = c(0.1, 0.5, 0.5))
# pl_joined <- plot_grid(plot_study_area,
#                        plot_initial_LULC,
#                        plot_anthropogenic_features,
#                        plot_surface_freshwater,
#                        plot_restricted_areas,
#                        plot_slope_percent ,
#                        nrow = 2, ncol = 2,
#                        align = 'hv',
#                        rel_heights = c(2,1),
#                        rel_widths = c(1,2),
#                        labels = c('A', 'B', 'C', 'D', 'E', 'F'),
#                        scale = 0.95)
# ggsave(file.path(output_folder, paste(publication_indicator, ' ', 'ECU Esmeraldas Overview plot cowplot', output_format, sep = '')),
#        height = 17, width = 10, dpi = output_dpi, units = output_unit)
#
#
#
# ggarrange(plot_study_area,
#           plot_initial_LULC,
#           ggarrange(plot_anthropogenic_features, plot_surface_freshwater, ncol = 2, labels = c('C', 'D')),
#           ggarrange(plot_restricted_areas, plot_slope_percent, ncol = 2, labels = c('E', 'F')),
#           nrow = 4,
#           labels = c('A', 'B'))
# ggsave(file.path(output_folder, paste(publication_indicator, ' ', 'ECU Esmeraldas Overview plot ggpubr', output_format, sep = '')),
#        height = 17, width = 10, dpi = output_dpi, units = output_unit)
### TODO (legend alpha value): Forest degradation and regeneration mplc (user-defined) ##########
if (local_degradation_simulated == TRUE) {
plot_title <- 'Forest degradation and regeneration mplc (user-defined)'
create_plot_for_raster_file <- function(raster_file_location,
plot_title, climate_period) {
legend_title <- "Simulated user-defined\nforest degradation and regeneration stages"
raster_to_process <- raster(raster_file_location)
classes <- tibble(
# degradation low = 1
# degradation moderate = 2
# degradation severe = 3
# degradation absolute = 4
# regeneration low = 5
# regeneration medium = 6
# regeneration high = 7
# regeneration full = 8
# gross forest = 9
# region = 10
class = c(1,2,3,4,5,6,7,8,9,10),
class_description = c("degradation low", "degradation moderate", "degradation severe", "degradation absolute (pre-defined)",
"regeneration low", "regeneration medium","regeneration high", "regeneration full (pre-defined)",
"gross forest", "region")
)
raster_dataframe_stages <- as.data.frame(raster_to_process, xy = TRUE) %>%
drop_na %>%
rename(value = 3) %>%
full_join(classes, by = c('value' = 'class')) %>%
filter(value %in% c(4,3,2,1,5,6,7,8)) %>%
mutate(class_description = fct_relevel(class_description, c("degradation absolute (pre-defined)", "degradation severe","degradation moderate", "degradation low",
"regeneration low", "regeneration medium","regeneration high", "regeneration full (pre-defined)")))
pl <- ggplot()
# plot hillshade
pl <- pl + dem_hillshade_layer
pl <- pl + scale_fill_gradient(low = "darkgrey", high = "white")
# plot_all
pl <- pl + new_scale_fill()
pl <- pl + geom_raster(data = raster_dataframe_stages,
aes(x = x, y = y, fill = class_description))
pl <- pl + scale_fill_brewer(palette= 'BrBG', name=legend_title)
# transform
pl <- pl + coord_sf(crs = user_defined_EPSG)
# # add attributes, themes and labs
pl <- pl + ggspatial::annotation_scale(location = user_defined_map_scale_location,
bar_cols = c(user_defined_baseline_color, "white"),
text_family = user_defined_font)
pl <- pl + ggspatial::annotation_north_arrow(location = user_defined_north_arrow_location,
which_north = "true",
pad_x = unit(user_defined_north_arrow_pad_x, user_defined_north_arrow_unit),
pad_y = unit(user_defined_north_arrow_pad_y, user_defined_north_arrow_unit),
style = ggspatial::north_arrow_fancy_orienteering(fill = c(user_defined_baseline_color, "white"),
line_col = user_defined_baseline_color,
text_family = user_defined_font))
pl <- pl + theme_LPB_RAP
pl <- pl + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
pl <- pl + theme(panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
pl <- pl + labs(title = plot_title,
subtitle = paste(subtitle_prefix),
caption = paste(caption_landscape, climate_period, sep = ' | '))
ggsave(file.path(output_folder, paste(publication_indicator, ' ', plot_title, ' ', subtitle_prefix, output_format, sep = '')),
height = output_height, width = output_width, dpi = output_dpi, units = output_unit)
}
scenarios <- tibble(
scenario_name = c('weak_conservation', 'enforced_conservation', 'no_conservation'),
start_year = c(initial_simulation_year_BAUs , initial_simulation_year_BAUs, initial_simulation_year_worst_case)
)
for (i in seq_along(scenarios$scenario_name)) {
scenario_i <- scenarios[i,] %>%
pull(scenario_name)
start_year_i <- scenarios[i,] %>%
pull(start_year)
raster_type_input_folder <- file.path(input_folder, scenario_i, 'MPLC_forest_degradation_and_regeneration')
tibble(
file_name = list.files(raster_type_input_folder, full.names = TRUE),
) %>%
mutate(time_step = as.numeric(str_sub(file_name, -7, -5)),
year = time_step + start_year_i - 1,
plot_title = paste(plot_title, scenario_i, year)) %>%
left_join(climate_periods_complete) %>%
rowwise() %>%
do({
print(paste('plotting', .$plot_title))
create_plot_for_raster_file(raster_file_location = .$file_name,
plot_title = .$plot_title,
climate_period = .$description)
tibble()
}
)
}
}
##################################################################################################################################
### END CODE Model stage 1 #######################################################################################################
##################################################################################################################################
##################################################################################################################################
### START CODE Model Stage 2 #####################################################################################################
##################################################################################################################################
# ### MS2 TODO: fragmentation mplc RAP maps probing dates ########################
# if (fragmentation_simulated == TRUE) {
#   plot_title <- 'Fragmentation mplc RAP juxtaposition'
#   # code in brackets and for scenario use: fragmentation map mplc and RAP (maybe two in one per probing date)
# }
#
# ### MS2 TODO: PHC conflict pixels probing dates ################################
# if (potential_habitat_corridors_simulated == TRUE) {
#   plot_title <- 'Potential Habitat Corrdiors conflict pixels'
#   # code in brackets and for scenario use: mplc, RAP probing dates + population peak + peak demands year
# }
#
# ### MS2 TODO: PHC probability map entire simulation time frame #################
# if (potential_habitat_corridors_simulated == TRUE) {
#   plot_title <- 'Potential Habitat Corrdiors probability map entire simulation time frame'
#   # code in brackets and for scenario use: mplc, RAP probability maps entire simulation time frame
# }
#
# ### MS2 TODO: PHC probability map population peak year and peak demand year ####
# if (potential_habitat_corridors_simulated == TRUE) {
#   plot_title <- 'Potential Habitat Corrdiors probability map peak demands year'
#   # code in brackets and for scenario use: mplc, RAP probability maps population peak year and peak demands year
# }
##################################################################################################################################
### END CODE Model Stage 2 #######################################################################################################
##################################################################################################################################
### TODO CITATIONS #############################################################
# # general plotting
# library(tidyverse)
# library(ggplot2)
# library(lubridate)
# library(viridis)
# library(magrittr)
# library(tidyr)
# library(ggnewscale)
# # install.packages("devtools")
# # devtools::install_github("eliocamp/ggnewscale@dev")
# library(ggrepel) # out?
# library(ggridges) # out?
# library(ggthemes)
#
# # data processing
# library(foreign) # for reading dbfs
# library(dplyr)
# library(gridExtra) # to arrange grid plots
#
# # spatial and raster processing
# library(stars)
# library(raster)
# library(rasterVis)
# library(rgdal)
# library(dismo) #map raster on Google Map
# library(ggspatial)
# library(sf)
# library(sp)
# library(ggmap)
# library(scales)
# library(elevatr)
# library(GISTools)
# library(maps)
# library(ggsn)
# TODO CITATIONS ####
citation(package = "base", lib.loc = NULL, auto = NULL)
# readCitationFile(file, meta = NULL)
citation(package = "tidyverse", lib.loc = NULL, auto = NULL)
